#!/usr/bin/ruby

# "add-rails-dev-site"
# Written by Karl Wilbur karl@karlwilbur.net
# Creates a new local virtual host for RoR apps on:
#   Ubuntu 16.04
#

require 'trollop'
require 'sudo'

@opts = Trollop::options do
  version "1.0.0"
  banner <<-EOT

Creates local Apache virtual host config for <name> as '<name>.kandrsoft.dev', or as <fqdn>, for the Rails app in <path>.

Usage:

  add-rails-dev-site [OPTIONS]"

Examples:

  These will create host 'example-project.kandrsoft.dev' which serves code from `~/Projects/example-project`

    ~/Projects/example-project$ add-rails-dev-site
    ~$ add-rails-dev-site -p ~/Projects/example-project

  These will create host 'example.foo.bar' which serves code from `~/Projects/example-foo`

    ~$ add-rails-dev-site -p ~/Projects/example-foo -f example.foo.bar

Options:

EOT

  opt :app_path, 'Where the code lives. Defaults to: pwd', type: :string, short: 'p'
  opt :app_name, 'The hostname to be used. Defaults to: basename `pwd` ', type: :string, short: 'n'
  opt :fqdn, 'The FQDN to be used. Defaults to: <app_name>.kandrsoft.dev', type: :string, short: :none
  opt :docroot, 'The location to be used as DOCUMENT ROOT for Apache. Defaults to: /srv/http/<fqdn>', type: :string, short: :none
  opt :apache_config, 'The name of the Apache config file to be created. Defaults to: <fqdn>.conf', type: :string, short: :none
  opt :apache_common, 'The name of the Apache common (shared) config file to be created. Defaults to: <app_name>_common.conf', type: :string, short: :none
end

def opts
  @opts
end

opts[:app_path] ||= Dir.pwd
opts[:app_name] ||= File.basename(opts[:app_path])
opts[:app_name] = opts[:app_name].downcase
opts[:fqdn] ||= "#{opts[:app_name]}.kandrsoft.dev"
opts[:fqdn] = opts[:fqdn].downcase
opts[:docroot] ||= "/srv/http/#{opts[:fqdn]}"
opts[:apache_config] ||= "#{opts[:fqdn]}.conf"
opts[:apache_common] ||= "#{opts[:app_name]}_common.conf"

def sudo
  @sudo ||=begin
    puts "Elevated privileges needed to complete setup and configuration. Please provide your password to sudo, if needed."
    _sudo = Sudo::Wrapper.new
    _sudo.start!
    _sudo
  end
end

def sudo_running?
  @sudo && @sudo.running?
end

def fail_with(msg)
  sudo.stop! if sudo_running?
  puts
  puts msg
  puts
  exit 1
end

def remove_docroot_directory
  if File.exist?( opts[:docroot] )
    print 'Removing host directory...'
    sudo[Kernel].system( "rm -f #{opts[:docroot]}" )
    puts 'done.'
  end
end

def remove_apache_config_files
  if File.exist? ( "/etc/apache2/sites-available/#{opts[:fqdn]}.conf")
    print 'Removing host configuration files...'
    sudo[Kernel].system( "rm -f /etc/apache2/conf.d/#{opts[:apache_common]}" ) if File.exist?("/etc/apache2/conf.d/#{opts[:apache_common]}")
    sudo[Kernel].system( "rm -f /etc/apache2/sites-enabled/#{opts[:apache_config]}" ) if File.exist?("/etc/apache2/sites-enabled/#{opts[:apache_config]}")
    sudo[Kernel].system( "rm -f /etc/apache2/sites-available/#{opts[:apache_config]}" ) if File.exist?("/etc/apache2/sites-available/#{opts[:apache_config]}")
    puts "done."
  end
end

def create_docroot_symlink
  fail_with("ERROR: DocRoot directoy '#{opts[:docroot]}' already exists. Exiting.") if File.exist?( opts[:docroot] )
  print "Creating host directory symlink '#{opts[:docroot]}' => '#{opts[:app_path]}'..."
  sudo[Kernel].system( "ln -s '#{opts[:app_path]}' '#{opts[:docroot]}'" )
  fail_with "ERROR: Failed to create DocRoot directory." unless File.exist?( opts[:docroot] )
  fail_with "ERROR: DocRoot directory exists but it not a symlink." unless File.symlink?( opts[:docroot] )
  puts 'done.'
end

def create_site_config
  print "Creating Apache site configuration file '/etc/apache2/sites-available/#{opts[:apache_config]}'..."
  sudo[Kernel].system( "install -m 0644 -o root -g root -T /etc/apache2/sites-available/exampleapp.kandrsoft.dev.conf /etc/apache2/sites-available/#{opts[:apache_config]}" )
  if !File.exist?("/etc/apache2/sites-available/#{opts[:apache_config]}")
    puts 'FAILED!'
    remove_docroot_directory
    remove_apache_config_files
    fail_with 'ERROR: Failed to create host configuration.'
  end
  puts 'done.'
end

def create_common_config
  print "Creating Apache common configuration file '/etc/apache2/conf.d/#{opts[:apache_common]}'..."
  sudo[Kernel].system( "install -m 0644 -o root -g root -T /etc/apache2/conf.d/exampleapp_common.conf /etc/apache2/conf.d/#{opts[:apache_common]}" )
  if !File.exist?("/etc/apache2/conf.d/#{opts[:apache_common]}")
    puts 'FAILED!'
    remove_docroot_directory
    remove_apache_config_files
    fail_with 'ERROR: Failed to create common host configuration.'
  end
  puts 'done.'
end

def update_appname_in_config
  print "Updating host configuration in '/etc/apache2/sites-available/#{opts[:apache_config]}' and '/etc/apache2/conf.d/#{opts[:apache_common]}'..."
  sudo[Kernel].system( "sed -i \"s/exampleapp.kandrsoft.dev/#{opts[:fqdn]}/g\" /etc/apache2/sites-available/#{opts[:apache_config]} /etc/apache2/conf.d/#{opts[:apache_common]}" )
  sudo[Kernel].system( "sed -i \"s/exampleapp/#{opts[:app_name]}/g\" /etc/apache2/sites-available/#{opts[:apache_config]} /etc/apache2/conf.d/#{opts[:apache_common]}" )
  if sudo[Kernel].system( "grep exampleapp /etc/apache2/sites-available/#{opts[:apache_config]} /etc/apache2/conf.d/#{opts[:apache_common]} > /dev/null" )
    puts 'FAILED!'
    # remove_docroot_directory
    # remove_apache_config_files
    fail_with 'ERROR: Failed to update app name in host configuration files.'
  end
  puts 'done.'
end

def enable_new_site
  print 'Testing current Apache configuration...'
  if !sudo[Kernel].system( 'apache2ctl -t' )
    remove_docroot_directory
    remove_apache_config_files
    fail_with 'ERROR: Current Apache configuration is failing. Fix that and try this again.'
  end
  sudo[Kernel].system( "a2ensite #{opts[:apache_config]}" )
  print 'Testing new Apache configuration...'
  if !sudo[Kernel].system( 'apache2ctl -t' )
    puts 'Host configuration check failed!'
    puts 'Check host configuration files:'
    puts "    /etc/apache2/sites-available/#{opts[:apache_config]}"
    puts "    /etc/apache2/conf.d/#{opts[:apache_common]}"
    fail_with 'ERROR: New Apache configuration failed.'
  end
end

def restart_apache
  print 'Restarting Apache...'
  if !sudo[Kernel].system( 'apache2ctl restart' )
    puts 'Failed to restarting Apache!'
    puts 'Please try restarting Apache manually:'
    puts '   sudo apache2ctl restart'
    fail_with 'ERROR: Apache restart failed.'
  end
  puts 'done.'
end

# puts opts
create_docroot_symlink
create_site_config
create_common_config
update_appname_in_config
enable_new_site
restart_apache
sudo.stop! if sudo_running?
